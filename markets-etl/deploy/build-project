#!/usr/bin/env bash
set -eou pipefail

dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
app=$(basename $(dirname $dir))
src_dir=''
case $(whoami) in
  (skilbjo)         src_dir='/Users/skilbjo/dev/markets-etl' ;;
  ('john.skilbeck') src_dir='/Users/john.skilbeck/dev/markets-etl' ;;
esac

cd "${dir}/../../"                   # now in ~/dev/lambdas/

cleanup(){
  if [[ -f ${app}/project.clj ]]; then rm -f ${app}/project.clj; fi
  if [[ -d ${app}/resources   ]]; then rm -r ${app}/resources; fi
  if [[ -d ${app}/src         ]]; then rm -r ${app}/src; fi
}

copy_files(){
  cleanup

  mkdir -p "${app}/resources" && \
    cp "${app}/include/log4j.properties" "${app}/resources/log4j.properties"

  cp "${src_dir}/project.clj"  "${app}/project.clj"
  cp -r "${src_dir}/src"       "${app}/src" \
    && if [[ -d ${app}/src/benchmark ]]; then rm -rf ${app}/src/benchmark; fi # benchmark has references to test/fixtures ns, which is not copied in
}

add_aws_lambda_clj(){
  cp "${app}/include/aws_lambda.clj" "${app}/src/jobs/aws_lambda.clj"
}

util_clj(){
  sed -i '' -e '1,7d;' "${app}/src/markets_etl/util.clj"

  local header='(ns markets-etl.util
  (:require [clj-http.client :as http]
            [clj-time.core :as time]
            [clj-time.coerce :as coerce]
            [clj-time.format :as formatter]
            [clojure.pprint :as pprint]
            [clojure.string :as string])
  (:import [com.amazonaws.services.kms AWSKMS AWSKMSClientBuilder]
           [com.amazonaws.services.kms.model DecryptRequest]
           [java.util Base64]
           (java.nio ByteBuffer)
           (java.nio.charset Charset)))'

  echo "$header" | cat - "${app}/src/markets_etl/util.clj" >temp && \
    mv temp "${app}/src/markets_etl/util.clj"

  ## Tiingo only updated at 6pm PST (next day UTC). As such adjust the date
  sed -i '' \
    's/(def now (-> (time\/now)/(def now (-> (time\/yesterday)/' \
    "${app}/src/markets_etl/util.clj"

  local decrypt='
; -- aws -----------------------------------------------
(defn decrypt [ciphertext]
  (let [decoder (Base64/getDecoder)
        decoded-text (.decode decoder ciphertext)
        kms-client (AWSKMSClientBuilder/defaultClient)
        decode-request (doto (DecryptRequest.)
                         (.withCiphertextBlob (ByteBuffer/wrap decoded-text)))
        decode-response (.decrypt kms-client decode-request)]
    (.toString (.decode (Charset/forName "UTF-8") (.getPlaintext decode-response)))))'

  echo "$decrypt" >>"${app}/src/markets_etl/util.clj"
}

sql_clj(){
  sed -i '' -e '1,6d;' "${app}/src/markets_etl/sql.clj"

  local header='
(ns markets-etl.sql
  (:require [amazonica.aws.s3 :as s3]
            [clojure.string :as string]
            [clojure.data.csv :as csv]
            [clojure.java.jdbc :as jdbc]
            [clojure.java.io :as io]
            [clojure.tools.logging :as log]
            [environ.core :refer [env]]
            [markets-etl.util :as util])
  (:import [java.sql DriverManager]))'

  echo "$header" | cat - "${app}/src/markets_etl/sql.clj" >temp && \
    mv temp "${app}/src/markets_etl/sql.clj"

  athena='
; https://github.com/metasoarous/semantic-csv/blob/master/src/semantic_csv/impl/core.cljc#L24
(defn stringify-keyword [x]
  (cond
    (string? x)   x
    (keyword? x)  (->> x str (drop 1) (apply str))
    :else         (str x)))

; https://github.com/metasoarous/semantic-csv/blob/master/src/semantic_csv/transducers.cljc#L361
(defn vectorize*
  ([]
   (vectorize* {}))
  ([{:keys [header prepend-header format-header]
     :or {prepend-header true format-header stringify-keyword}}]
   (fn [rf]
     (let [hdr (volatile! header)
           prepend-hdr (volatile! prepend-header)]
       (fn
         ([] (rf))
         ([result] (rf result))
         ([result input]
          (when (empty? @hdr)
            (do (vreset! hdr (into [] (keys input)))))
          (if @prepend-hdr
            (do (vreset! prepend-hdr false)
              (rf
                 (if format-header
                   (rf result (mapv format-header @hdr))
                   (rf result @hdr))
                 (mapv (partial get input) @hdr)))
            (rf result (mapv (partial get input) @hdr)))))))))

; https://github.com/metasoarous/semantic-csv/blob/master/src/semantic_csv/core.cljc#L375
(defn vectorize
  ([rows]
   (vectorize {} rows))
  ([opts rows]
   (sequence (vectorize* opts) rows)))

(defn insert-to-athena [job date coll]
  (let [dataset        (-> coll first :dataset)
        convert-to-csv (fn [row]
                         (io/delete-file (str "/tmp/"
                                              job
                                              ".csv")
                                         true)
                         (with-open [writer (io/writer (str "/tmp/"
                                                            job
                                                            ".csv"))]
                           (csv/write-csv writer row)))
        s3-put         (fn [job]
                         (let [s3-path (str "datalake/markets-etl/"
                                            job
                                            "_fact"
                                            "/s3uploaddate="
                                            date
                                            "/"
                                            job
                                            ".csv")]
                           (log/info "s3-path is:" s3-path)
                           (s3/put-object :bucket-name "skilbjo-data"
                                          :key         s3-path
                                          :metadata    {:server-side-encryption "AES256"}
                                          :file        (str "/tmp/"
                                                            job
                                                            ".csv"))))]
    (->> coll
         vectorize
         convert-to-csv)

    (if (empty? (first coll))
      '"'"'()  ; this is a quoted empty list, ie exit early
      (s3-put job))))'

  echo "$athena" >>"${app}/src/markets_etl/sql.clj"
}

api_clj(){
  # fixed in https://github.com/skilbjo/markets-etl/pull/13
  #sed -i '' 's/ {:pre/ #_{:pre/g' "${app}/src/markets_etl/api.clj"
  echo ''
}

project_clj(){
  sed -i '' -e '1,3d;' "${app}/project.clj"

  local header='(defproject markets-etl "0.1.0"
  :uberjar-name "markets-etl.jar"
  :dependencies [[org.clojure/clojure "1.9.0"]
                 [com.amazonaws/aws-lambda-java-core "1.0.0"]
                 [com.amazonaws/aws-java-sdk-kms "1.11.98"]
                 [amazonica "0.3.117" :exclusions [com.amazonaws/aws-java-sdk]]
                 [org.clojure/data.csv "0.1.4"]'

  echo "$header" | cat - "${app}/project.clj" >temp && \
    mv temp "${app}/project.clj"
}

src_files_clj(){
  # get ready to replace the -main and execute! for all jobs
  sed -i '' -e '65,$ d' "${app}/src/jobs/currency.clj"
  sed -i '' -e '61,$ d' "${app}/src/jobs/economics.clj"
  sed -i '' -e '282,$ d' "${app}/src/jobs/equities.clj"
  sed -i '' -e '79,$ d' "${app}/src/jobs/interest_rates.clj"
  sed -i '' -e '79,$ d' "${app}/src/jobs/real_estate.clj"
  new_entrypoint='
(defn execute! [date data]
  (->> data
       (map prepare-row)
       flatten
       (sql/insert-to-athena (-> *ns* str (string/split #"\.") second) date)
       doall))

(defn -main [& args]
  (error/set-default-error-handler)
  (let [{:keys [options summary errors]} (cli/parse-opts args cli-options)
        query-params*        (if args
                               {:limit      (:limit query-params)
                                :start_date (-> options
                                                :date
                                                util/joda-date->date-str)
                                :end_date   (-> options
                                                :date
                                                util/joda-date->date-str)}
                               query-params)
        data        (->> datasets
                         (map #(api/get-data % query-params*))
                         flatten)]

    (execute! (-> query-params* :start_date) data)))'

  declare -a _jobs=("currency" "equities" "economics" "interest_rates" "real_estate")

  for _job in "${_jobs[@]}"; do
    # no upsert in "big data". change it to util/now and pray
    sed -i '' "s/:start_date.*/:start_date util\/now/g" "${app}/src/jobs/${_job}.clj"
    sed -i '' "s/:end_date.*/:end_date util\/now})/g" "${app}/src/jobs/${_job}.clj"

    # new entrypoint
    echo -e "$new_entrypoint" >>"${app}/src/jobs/${_job}.clj"

    # inject name of the file for the csv file name
    sed -i '' "s/\*ns\*/\"jobs\.${_job}\"/g" "${app}/src/jobs/${_job}.clj"
  done

  ## note #_intrinio below
  for _job in "equities"; do
    sed -i '' '302s/datasets/(concat alpha-vantage tiingo morningstar quandl intrinio)/' \
      "${app}/src/jobs/equities.clj"

    sed -i '' -e '306,$ d' "${app}/src/jobs/equities.clj"
    main_fn_tail='
      (execute! (-> query-params* :start_date) data))

  (util/notify-healthchecks-io (-> :healthchecks-io-api-key env)))'

    echo -e "$main_fn_tail" >>"${app}/src/jobs/${_job}.clj"
  done

  # wrap decrypt
  sed -i '' 's/ env/ env util\/decrypt/g' "${app}/src/jobs/currency.clj"
  sed -i '' 's/ env/ env util\/decrypt/g' "${app}/src/jobs/economics.clj"
  sed -i '' 's/ env/ env util\/decrypt/g' "${app}/src/jobs/equities.clj"
  sed -i '' 's/ env/ env util\/decrypt/g' "${app}/src/jobs/interest_rates.clj"
  sed -i '' 's/ env/ env util\/decrypt/g' "${app}/src/jobs/real_estate.clj"

  sed -i '' 's/ env/ env util\/decrypt/g' "${app}/src/markets_etl/api.clj"
  sed -i '' 's/ env/ env util\/decrypt/g' "${app}/src/markets_etl/sql.clj"
}

add_lambda_wrappers(){
  sql_clj
  api_clj
  util_clj
  project_clj
  src_files_clj
}

copy_files
add_aws_lambda_clj
add_lambda_wrappers
